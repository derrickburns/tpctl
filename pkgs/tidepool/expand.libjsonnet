local common = import '../../lib/common.jsonnet';
local lib = import '../../lib/lib.jsonnet';

{
  shadowNames(names):: std.map(function(x) '%s-shadow' % x, names),

  isShadow(me):: lib.isEnabledAt(me, 'shadow') && lib.nonNull(me, 'shadow.sender'),

  hasShadow(me):: lib.isEnabledAt(me, 'shadow') && lib.nonNull(me, 'shadow.receiver'),

  internalGatewayUpstream: {
    name: 'internal-gateway-proxy',
    namespace: 'gloo-system',
  },

  expand(config, me, namespace, pkg):: me + $.withVirtualServices(config, me, namespace, pkg),

  cors(dnsNames):: (if dnsNames != [] then { allowOrigin: dnsNames } else { allowOriginRegex: [ '.*' ] }) + {
    allowCredentials: true,
    allowHeaders: [
      'authorization',
      'content-type',
      'x-tidepool-session-token',
      'x-tidepool-trace-request',
      'x-tidepool-trace-session',
    ],
    allowMethods: [
      'GET',
      'POST',
      'PUT',
      'PATCH',
      'DELETE',
      'OPTIONS',
    ],
    exposeHeaders: [
      'x-tidepool-session-token',
      'x-tidepool-trace-request',
      'x-tidepool-trace-session',
    ],
    maxAge: '600s',
  },

  withVirtualServices(config, me, namespace, pkg):: (
    local dnsNames = lib.getElse(me, 'dnsNames', []);
    {
      virtualServices: {
        http: {
          dnsNames: dnsNames,
          enabled: !$.isShadow(me),
          labels: {
            protocol: 'http',
            type: 'external',
            namespace: namespace,
          },
          virtualHostOptions: {
            stats: {
              virtualClusters: lib.getElse(me, 'virtualClusters', []),
            },
          },
          redirect: true,
        },
        https: {
          dnsNames: dnsNames,
          enabled: !$.isShadow(me),
          timeout: lib.getElse(me, 'maxTimeout', '120s'),
          hsts: {
            enabled: true,
          },
          virtualHostOptions: {
            cors: $.cors(if lib.isEnabledAt(me, 'cors') then dnsNames else []),
            stats: {
              virtualClusters: lib.getElse(me, 'virtualClusters', []),
            },
          }, 
          routeOptions: if $.hasShadow(me) then {
            shadowing: {
              upstream: $.internalGatewayUpstream,
              percentage: 100.0,
            },
          } else {},
          routeAction: {
            single: {
              upstream: $.internalGatewayUpstream,
            },
          },
          labels: {
            protocol: 'https',
            type: 'external',
            namespace: namespace,
          },
        },
      },
    }
  ),
}
