local common = import '../../lib/common.jsonnet';
local lib = import '../../lib/lib.jsonnet';
local pomerium = import '../../lib/pomerium.jsonnet';

local accessLoggingOption = {
  accessLoggingService: {
    accessLog: [
      {
        fileSink: {
          jsonFormat: {
            authority: '%REQ(:authority)%',
            authorization: '%REQ(authorization)%',
            content: '%REQ(content-type)%',
            duration: '%DURATION%',
            forwardedFor: '%REQ(X-FORWARDED-FOR)%',
            method: '%REQ(:method)%',
            path: '%REQ(:path)%',
            remoteAddress: '%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%',
            response: '%RESPONSE_CODE%',
            scheme: '%REQ(:scheme)%',
            bytesReceived: '%BYTES_RECEIVED%',
            responseCodeDetail: '%RESPONSE_CODE_DETAILS%',
            requestDuration: '%REQUEST_DURATION%',
            responseFlags: '%RESPONSE_FLAGS%',
            startTime: '%START_TIME%',
            upstream: '%UPSTREAM_CLUSTER%',
            userAgent: '%REQ(user-agent)%',
            referer: '%REQ(referer)%',
          },
          path: '/dev/stdout',
        },
      },
    ],
  },
};

{
  expand(config, me, namespace, pkg)::
    me
    + $.withGateways(config, me, namespace, pkg)
    + $.withVirtualServices(pomerium.rootDomain(config)),

  withVirtualServices(rootDomain):: {
    virtualServices: {
      authenticate: {
        dnsNames: [
          'authenticate.%s' % rootDomain,
        ],
        enabled: true,
        labels: {
          protocol: 'https',
          type: 'pomerium',
        },
      },
      authorize: {
        dnsNames: [
          'authorize.%s' % rootDomain,
        ],
        enabled: true,
        labels: {
          protocol: 'https',
          type: 'pomerium',
        },
      },
      'proxy-https': {
        enabled: true,
        labels: {
          protocol: 'https',
          type: 'pomerium',
        },
      },
      'proxy-http': {
        enabled: true,
        labels: {
          protocol: 'http',
          type: 'pomerium',
        },
      },
    },
  },

  withGateways(config, me, namespace, pkg):: (
    local update(name, x) = { name: name, namespace: namespace } + x;
    { gateways+: std.mapWithKey(update, $.gateways) }
  ),

  gateways:: {
    'pomerium-proxy': {
      enabled: true,
      namespace: 'gloo-system',
      accessLogging: accessLoggingOption,
      options+: {
        healthCheck: true,
        proxyProtocol: true,
        tracing: true,
      },
      proxy: 'pomerium-gateway-proxy',
      selector: {
        protocol: 'http',
        type: 'pomerium',
      },
    },
    'pomerium-proxy-ssl': {
      enabled: true,
      namespace: 'gloo-system',
      accessLogging: accessLoggingOption,
      options+: {
        healthCheck: true,
        proxyProtocol: true,
        ssl: true,
        tracing: true,
      },
      proxy: 'pomerium-gateway-proxy',
      selector: {
        protocol: 'https',
        type: 'pomerium',
      },
    },
  },
}
