#!/usr/bin/env python
#
# k8s_sort
#
# Input: YAML stream of Kubernetes manifests (i.e. each object has metadata with apiVersion, kind, name)
# Output: sorted YAML stream of same Kubernetes manifests
#
# Pre-condition:
# 1) Input is sorted by apiVersion/kind
#
# Post-condition:
#
# 1) Output is sorted by apiVersion/kind
# 2) Within apiVersion/kind, output is sorted by (namespace, name)

from ruamel.yaml import YAML
import sys

yaml = YAML()

known = [
	{ "apiVersion": "/", "kind": "Namespace"},
	{ "apiVersion": "networking.k8s.io/", "kind": "NetworkPolicy"},
	{ "apiVersion": "/", "kind": "ResourceQuota"},
	{ "apiVersion": "scheduling.k8s.io/", "kind": "PriorityClass"},
	{ "apiVersion": "/", "kind": "LimitRange"},
	{ "apiVersion": "policy/", "kind": "PodSecurityPolicy"},
	{ "apiVersion": "policy/", "kind": "PodDisruptionBudget"},
	{ "apiVersion": "/", "kind": "Secret"},
	{ "apiVersion": "/", "kind": "ConfigMap"},
	{ "apiVersion": "storage.k8s.io/", "kind": "StorageClass"},
	{ "apiVersion": "/", "kind": "PersistentVolume"},
	{ "apiVersion": "/", "kind": "PersistentVolumeClaim"},
	{ "apiVersion": "/", "kind": "ServiceAccount"},
	{ "apiVersion": "apiextensions.k8s.io/", "kind": "CustomResourceDefinition"},
	{ "apiVersion": "rbac.authorization.k8s.io/", "kind": "ClusterRole"},
	{ "apiVersion": "/", "kind": "ClusterRoleList"},
	{ "apiVersion": "rbac.authorization.k8s.io/", "kind": "ClusterRoleBinding"},
	{ "apiVersion": "rbac.authorization.k8s.io/", "kind": "ClusterRoleBindingList"},
	{ "apiVersion": "rbac.authorization.k8s.io/", "kind": "Role"},
	{ "apiVersion": "rbac.authorization.k8s.io/", "kind": "RoleList"},
	{ "apiVersion": "rbac.authorization.k8s.io/", "kind": "RoleBinding"},
	{ "apiVersion": "rbac.authorization.k8s.io/", "kind": "RoleBindingList"},
	{ "apiVersion": "/", "kind": "Service"},
	{ "apiVersion": "apps/", "kind": "DaemonSet"},
	{ "apiVersion": "/", "kind": "Pod"},
	{ "apiVersion": "/", "kind": "ReplicationController"},
	{ "apiVersion": "apps/", "kind": "ReplicaSet"},
	{ "apiVersion": "apps/", "kind": "Deployment"},
	{ "apiVersion": "autoscaling/", "kind": "HorizontalPodAutoscaler"},
	{ "apiVersion": "apps/", "kind": "StatefulSet"},
	{ "apiVersion": "batch/", "kind": "Job"},
	{ "apiVersion": "batch/", "kind": "CronJob"},
	{ "apiVersion": "networking.k8s.io /", "kind": "Ingress"},
	{ "apiVersion": "gloo.solo.io/", "kind": "Settings"},
	{ "apiVersion": "gloo.solo.io/", "kind": "Upstream"},
	{ "apiVersion": "gateway.solo.io/", "kind": "RouteTable"},
	{ "apiVersion": "gateway.solo.io/", "kind": "VirtualService"},
	{ "apiVersion": "gateway.solo.io/", "kind": "Gateway"},
	{ "apiVersion": "cert-manager.io/", "kind": "Issuer"},
	{ "apiVersion": "cert-manager.io/", "kind": "ClusterIssuer"},
	{ "apiVersion": "cert-manager.io/", "kind": "Certificate"},
	{ "apiVersion": "monitoring.coreos.com/", "kind": "PodMonitor"},
	{ "apiVersion": "monitoring.coreos.com/", "kind": "ServiceMonitor"},
	{ "apiVersion": "monitoring.coreos.com/", "kind": "PrometheusRule"},
	{ "apiVersion": "jaegertracing.io/", "kind": "Jaeger"},
	{ "apiVersion": "helm.fluxcd.io/", "kind": "HelmRelease"},
        ]

kv_index = {}

def key(value):
    parts = value['apiVersion'].split("/")
    if len(parts) == 1:
        return f"/{value['kind']}"
    else:
        return f"{parts[0]}/{value['kind']}"

def prepare(input, silent):
    for x in input:
        k = key(x)
        if k not in kv_index:
            if not silent:
                print("adding", k)
            kv_index[k] = len(kv_index)

def to_kv_index(value):
    return kv_index[key(value)]

def sort_key(value):
    m = value["metadata"]
    return (to_kv_index(value), m["namespace"] if "namespace" in m else "", m["name"])

def load(f):
    return [ x for x in yaml.load_all(f) if x != None]

def dump(output):
    yaml.dump_all(output, sys.stdout)

def main():
    input = load(sys.stdin)
    prepare(known, True)
    prepare(input, True)
    output = sorted(input, key=sort_key)
    dump(output)

main()
