#!/usr/bin/python3
#
# k8s_sort 
#
# Input: YAML stream of Kubernetes manifests (i.e. each object has metadata with apiVersion, kind, name)
# Output: sorted YAML stream of same Kubernetes manifests
#
# Pre-condition:
# 1) Input is sorted by apiVersion/kind
#
# Post-condition: 
#
# 1) Output is sorted by apiVersion/kind 
# 2) Within apiVersion/kind, output is sorted by (namespace, name)

from ruamel.yaml import YAML
import sys

yaml = YAML()

kv_index = {}

def key(value):
    return f"{value['apiVersion']}/{value['kind']}"

def prepare(input):
    for x in input:
        k = key(x)
        if k not in kv_index:
            kv_index[k] = len(kv_index)

def to_kv_index(value):
    return kv_index[key(value)]

def sort_key(value):
    m = value["metadata"]
    return (to_kv_index(value), m["namespace"] if "namespace" in m else "", m["name"])

def load(f):
    return [ x for x in yaml.load_all(f) if x != None]

def dump(output):
    yaml.dump_all(output, sys.stdout)

def main():
    input = load(sys.stdin)
    prepare(input)
    output = sorted(input, key=sort_key)
    dump(output)

main()
