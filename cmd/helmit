#!/bin/bash
# Usage:
#   helmit template ${file:-helmrelease.yaml} - expand template for HelmRelease
#   helmit install ${file:-helmrelease.yaml} - install HelmRelease
#   helmit delete ${file:-helmrelease.yaml} - delete HelmRelease
#   helmit cmp ${file:-helmrelease.yaml} [$file2] - compare expanded HelmRelease outputs, if file2 is not given, extract from cluster

TMP_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'TMP_DIR')

if [ ! -f /usr/local/bin/dyff ]
then
  brew install dyff
fi

# clean up all temporary files
function cleanup() {
  if [ -f "$TMP_DIR" ]; then
    cd /
    rm -rf $TMP_DIR
  fi
}

trap cleanup EXIT

op=$1
shift

if [ "$#" -eq 0 ]
then
  file=helmrelease.yaml
else
  file=$1
  shift
fi

if [ ! -f "$file" ]
then
  echo "Helmrelease file $file not found"
  exit 1
fi

function get_release() {
  local hr=$1
  echo "$hr" | jq '.spec.releaseName' | sed -e 's/"//g'
}

function get_name() {
  local hr=$1
  echo "$hr" | jq '.spec.chart.name' | sed -e 's/"//g'
}

function get_namespace() {
  local hr=$1
  echo "$hr" | jq '.metadata.namespace' | sed -e 's/"//g'
}

function get_version() {
  local hr=$1
  echo "$hr" | jq '.spec.chart.version' | sed -e 's/"//g'
}

function get_values() {
  local hr=$1
  echo "$hr" | jq '.spec.values' | yq r - 
}

function get_repository() {
  local hr=$1
  echo "$hr" | jq .spec.chart.repository | sed -e 's/"//g'
}

function load_chart() {
  local name=$1
  local repo=$2
  helm repo add $name $repo >/dev/null 2>&1
  helm repo update >/dev/null 2>&1
}

hr=$(yq r $file -j)
version=$(get_version "$hr")
repo=$(get_repository "$hr")
name=$(get_name "$hr")
release=$(get_release "$hr")
namespace=$(get_namespace "$hr")
release=${release:=${name}}

function show() {
  echo "---"
  echo "# $1"
  cat $1
}

case $op in
show)
  show $file
  ;;
install)
  echo "installing $file" >/dev/stderr
  show $file >/dev/stderr 
  load_chart $name $repo
  get_values "$hr" >/tmp/${name}-${namespace}.yaml
  kubectl create namespace $namespace 2>/dev/null
  op="upgrade -i --version $version -f /tmp/${name}-${namespace}.yaml"
  helm $op $release $name/$name --namespace ${namespace} 
  ;;
delete)
  echo "deleting $file" >/dev/stderr
  show $file >/dev/stderr 
  load_chart $name $repo
  echo "deleting" >/dev/stderr
  show $file >/dev/stderr
  helm delete $release $name/$name --namespace ${namespace} 
  ;;
template)
  echo "templating $file" >/dev/stderr
  show $file >/dev/stderr 
  load_chart $name $repo
  get_values "$hr" >/tmp/${name}-${namespace}.yaml
  op="template --version $version -f /tmp/${name}-${namespace}.yaml"
  helm $op $release $name/$name --namespace ${namespace} 
  ;;
get)
  echo "getting in cluster $namespace/$name"
  tmp=/tmp/$name-$namespace-$release
  kubectl get helmrelease -n $namespace $name -o yaml > $tmp
  show $tmp
  ;;
source)
  helm pull $name/$name --version $version --untar
  ;;
cmp)
  if [ "$#" -eq 0 ]
  then
    tmp=/tmp/$name-$namespace-$release
    kubectl get helmrelease -n $namespace $name -o yaml | yq d - 'metadata.annotations."kubectl.kubernetes.io/last-applied-configuration"'  | yq d - 'status'> $tmp
    file2=$file
    file=$tmp
  else
    file2=$1
  fi
  echo "=== HelmRelease Differences ==="
  #yamldiff --file1 $file --file2 $file2
  dyff between $file $file2 2>/dev/null
  echo "=== Helm Template Differences ==="

  helmit template $file 2>/dev/null | separate_files $TMP_DIR/left >$TMP_DIR/leftlist
  helmit template $file2 2>/dev/null | separate_files $TMP_DIR/right >$TMP_DIR/rightlist

  cd $TMP_DIR
  grc diff leftlist rightlist
  echo "== Resources Changed ==="
  for file in $(find left)
  do
    base=${file#left/}
    if [ -f right/$base ]
    then
      dyff between left/$base right/$base 2>/dev/null
    fi
  done
  ;;
esac
