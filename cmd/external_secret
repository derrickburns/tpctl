#!/usr/local/bin/python3
#
# Create/update/delete secrets managed in Amazon External Secrets
#
# Usage: $0 file create|update|upsert|delete|dryrun ${CLUSTER_NAME}
# encoded|plaintext

import base64
import boto3
import json
import os
import sys
import yaml

if len(sys.argv) != 4:
    print("Usage: external_secret create|update|upsert|delete|dryrun cluster encoded|plaintext < secrets_file")
    exit()

op = sys.argv[1]
cluster = sys.argv[2]
encoded = sys.argv[3]

input = sys.stdin
docs = yaml.safe_load_all(input)
for manifest in docs:
    if not manifest or "metadata" not in manifest:
        continue
    env = manifest["metadata"]["namespace"]
    base = manifest["metadata"]["name"]
    data = manifest["data"]

    secret = dict()
    secret["apiVersion"] = "kubernetes-client.io/v1"
    secret["kind"] = "ExternalSecret"
    secret["metadata"] = manifest["metadata"]
    secret["secretDescriptor"] = dict()
    secret["secretDescriptor"]["backendType"] = "secretsManager"
    secret["secretDescriptor"]["data"] = list()

    values = list()
    awsvalue = dict()
    client = boto3.client('secretsmanager')
    key = cluster + "/" + env + "/" + base

    for name, value in data.items():
        if encoded == "encoded" or encoded == "true":
            decoded = base64.standard_b64decode(value).decode("utf-8")
        else:
            decoded = value
        value = dict()
        value["key"] = key
        value["name"] = name
        value["property"] = name
        awsvalue[value["name"]] = decoded
        values.append(value)

    secret["secretDescriptor"]["data"] = values
    print("---")
    print(yaml.dump(secret))
    out = json.dumps(awsvalue)

    if op == "upsert":
        try:
            result = client.describe_secret(SecretId=key)
            client.update_secret(SecretId=key, SecretString=out)
        except:
            client.create_secret(Name=key, SecretString=out)
    elif op == "create":
        client.create_secret(Name=key, SecretString=out)
    elif op == "update":
        client.update_secret(SecretId=key, SecretString=out)
    elif op == "delete":
        client.delete_secret(SecretId=key)
    elif op == "dryrun":
        print(key, out)
    else:
        print("unknown operation", op)
