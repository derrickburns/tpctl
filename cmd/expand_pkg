#!/usr/bin/env bash

# expand_pkg - generates files for pkg
#
# $1 - namespace 
# $2 - package to instantiate
# $3 - configuration directory root; defaults to env variable $CONFIG_DIR
# $4 - template directory root; defaults to $TEMPLATE_DIR

set -e 

CONFIG_DIR=${3:-${CONFIG_DIR:-.}}
TEMPLATE_DIR=${4:-${TEMPLATE_DIR:-~/go/src/github.com/tidepool-org/tpctl/pkgs}}
MANIFEST_DIR=manifests

# clean up all temporary files
function cleanup() {
  rm -rf $TMP_DIR
}

# clean up working area on exit
function setup_tmpdir() {
  TMP_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'TMP_DIR')
  trap cleanup EXIT
}

# evaluate jsonnet file, write to stdout
function expand_jsonnet() {
  kubecfg show --tla-str-file prev=$1 --tla-code-file config=$2 --tla-str namespace=$3 --tla-str pkg=$4 $5 | k8s_sort
}

# evaluate all files in a pkg directory, write to stdout
function template() {
  local values=$1
  local absoluteTemplateDir=$2
  local namespace=$3
  local pkg=$4
  local prev=$5

  pushd $absoluteTemplateDir/$4 >/dev/null 2>&1
  for f in $(find . -type f -print); do
    echo "# file: ${f#./}, namespace: $namespace"
    echo '---'
    if [ "${f: -5}" == ".yaml" ]; then
      cat $f
    elif [ "${f: -13}" == ".yaml.jsonnet" ]; then
      expand_jsonnet $prev $values $namespace $pkg $f
    elif [ "${f: -17}" == "yaml.helm.jsonnet" ]; then
      expand_jsonnet $prev $values $namespace $pkg $f > $TMP_DIR/expanded
      expand_helm $TMP_DIR/expanded 
    fi
  done
  popd >/dev/null 2>&1
}

# convert values file into json, write to stdout
function get_values() {
  yq r $1/values.yaml -j 
  if [ $? -ne 0 ]; then
    exit 1
  fi
}

# write all YAML files in given directory as YAML stream, write to stdout
function show() {
  for file in $(find $1 -type f -name \*.yaml) 
  do
    echo "---"
    echo "# $file"
    cat $file
  done 2>/dev/null
}

# expand the HelmRelease file, write to stdout
function expand_helm() {
  file=$1
  hr=$(yq r $file -j)
  values=$(echo "$hr" | jq .spec.values | yq r - >/tmp/foobar)
  chart=$(echo "$hr" | jq .spec.chart.repository | sed -e 's/"//g')
  version=$(echo "$hr" | jq .spec.chart.version | sed -e 's/"//g')
  name=$(echo "$hr" | jq .spec.chart.name | sed -e 's/"//g')
  release=$(echo "$hr" | jq .spec.releaseName | sed -e 's/"//g')
  namespace=$(echo "$hr" | jq .metadata.namespace | sed -e 's/"//g')
  echo "$hr" | jq .spec.values | yq r - >$TMP_DIR/helmvalues.yaml
  release=${release:=${name}}
  helm repo add $name $chart  >/dev/null
  helm repo update >/dev/null
  helm template --version $version -f $TMP_DIR/helmvalues.yaml $release $name/$name --namespace ${namespace} >$TMP_DIR/xxx
  add_namespace $TMP_DIR/xxx $namespace
}

function main() {
  setup_tmpdir
  get_values $CONFIG_DIR >$TMP_DIR/values.json
  show $CONFIG_DIR/$MANIFEST_DIR/pkgs/$1/$2 >$TMP_DIR/prev.yaml
  template $TMP_DIR/values.json $TEMPLATE_DIR $1 $2 $TMP_DIR/prev.yaml
}

main $*
