logLevel: debug                              # the default log level for all services
email: derrick@tidepool.org                  # cluster admin email address

aws:
  accountNumber: 118346523422                # AWS account number
  iamUsers:                                  # AWS IAM users who will be grants system:master privileges to the cluster
  - derrickburns-cli
  - lennartgoedhart
  - lennartgoedhart-cli
  - benderr
  - benderr-cli
  - jamesraby-cli
  - jamesraby
  - haroldbernard-cli
  - haroldbernard
kubeconfig: "$HOME/.kube/config"             # place to put KUBECONFIG

cluster:
  metadata:
    name: test1                              # name of the cluster
    region: us-west-2                        # AWS region to host the cluster
  cloudWatch:                                # AWS cloudwatch configuration
    clusterLogging:                          
      enableTypes:                           # Types of log messages to persist to CloudWatch
      - authenticator
      - api
      - controllerManager
      - scheduler
  vpc:                                       # Amazon VPC configuration
    cidr: "10.47.0.0/16"                     # CIDR of AWS VPC
  nodeGroups: 
  - instanceType: "m5.large"                 # AWS instance type for workers 
    desiredCapacity: 4                       # initial capacity of auto scaling group of workers
    minSize: 1                               # minimum size of auto scaling group of workers
    maxSize: 10                              # maximum size of auto scaling group of workers
    name: ng
    iam:                                     # AWS IAM policies to attach to the nodes in the cluster
      attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
      withAddonPolicies:
        autoScaler: true
        certManager: true
        externalDNS: true

pkgs:
  amazon-cloudwatch:                         # AWS CloudWatch logging
    enabled: true
  external-dns:                              # External DNS maintains DNS aliases to Amazon ELBs
    enabled: true
  gloo:                                      # Gloo provides the API Gateway 
    enabled: true
    namespace: gloo-system                   # namespace to host gateway
  prometheus-operator:                       # Prometheus Operator creates Prometheus instances
    enabled: true
  certmanager:                               # Certmanager issues TLS certificates
    enabled: true
  cluster-autoscaler:                        # Cluster autoscaler scales the nodes in the cluster as needed
    enabled: true
  external-secrets:                          # External secrets loads persisted secrets from AWS Secrets Manager
    enabled: true
  reloader:                                  # Reloader restarts services on secrets/configmap changes
    enabled: true
  datadog:                                   # Datadog send telemetry to the hosted Datadog service
    enabled: false
  flux:                                      # Flux provides GitOps
    enabled: true
  fluxcloud:                                 # Fluxcloud sends GitOps notifications to Slack
    enabled: false
    username: "derrickburns"                 
    secret: slack                            # Name of secret in which Slack webhook URL is provided
    #channel: foo                            # Slack channel on which to post notifications
  metrics-server:                            # Metrics server collects Node level metrics and sends to Prometheus
    enabled: true
  sumologic:                                 # Sumologic collects metrics and logs and sents to the hosted service
    enabled: false
    apiEndpoint: https://api.us2.sumologic.com/api/v1/
    namespace: sumologic
  thanos:                                    # Thanos aggregates telemetry from all Tidepool clusters
    enabled: true
    bucket: tidepool-thanos                  # Writable S3 bucket in which to aggregate multi-cluster telemetry data
    secret: thanos-objstore-config           # Name of Kubernetes secret in which Thanos config is stored.
  tidebot:
    enabled: false

environments:
  qa2:
    marketo:
      enabled: false
    mongodb:
      enabled: true                          # Whether to use an embedded mongodb 
    tidepool:
      deployment:
        replicas: 1
      resources:
        requests: 
          memory: "64Mi"
          cpu: "50m"
        limits: 
          memory: "128Mi"
          cpu: "100m"
      chart:
        path: charts/tidepool/0.1.7
        ref: develop
      source: stg                            # Where to get initial secrets from
      enabled: true
      hpa:                                   # Whether to implement horizontal pod scalers for each service
        enabled: true
      nosqlclient:                           # Whether to deploy a nosqlclient to query Mongo data
        enabled: true
      mongodb:                  
        enabled: true
      gitops:          
        default: "glob:develop-*"            # Which filter to use for gitops image tags
        blip: "glob:release-1.29*"
        export: "glob:release-1.4*"            # Example filter for auth service
      buckets: {}                            # Which S3 buckets to store/retrieve data to/from
        #data: tidepool-test-qa2-data        # Name of the writable S3 bucket to store document data to
        #asset: tidepool-test-qa2-asset      # Name of the readable S3 bucker form which to get email assets
      certificate:
        secretName: tls                      # Name of the K8s secret to store the TLS certificate for the hosts served
        issuer: letsencrypt-staging          # Name of the Certificate Issuer to use
      gateway:
        default:                             # Default protocol to use for communication for email verification
          protocol: http                
        http:
          dnsNames:                          # DNS Names of the HTTP hosts to serve
          - localhost                       
        https:
          dnsNames:                          # DNS Names of the HTTPS hosts to serve
          - qa2.tidepool.org
      service:
        http:
          enabled: true                      # Whether to offer HTTP access
        https:
          enabled: true                      # Whether to offer HTTPS access
